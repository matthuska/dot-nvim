# #!/bin/bash
snippet #!
	#!/usr/bin/env bash

snippet conda
	# Set up conda itself, and activate env
	CONDA_BASE=$(conda info --base)
	source $CONDA_BASE/etc/profile.d/conda.sh
	conda activate ${1}

snippet array
	${1}=( ${2} ${3} )
	
snippet foreach
	for ${1} in ${${2}[@]}; do
		${3:#statements}
	done

snippet foreachi
	for ${1} in "${!${2}[@]}"; do
		${3:#statements}
	done

snippet qsub
	#$ -V
	#$ -j y
	#$ -o logs
	#$ -r yes
	#$ -cwd
	#$ -S /bin/bash
	#$ -P medium
	##$ -pe smp 20
	#$ -l h_vmem=40g
	#$ -l h_rt=48:00:00
	#$ -m bea
	#$ -M matthew.huska@mdc-berlin.de

snippet var
	RESULT=${VAR:-$DEFAULT}

snippet args
	#!/bin/bash
	# origin: https://stackoverflow.com/a/29754866 (2021-11-30)
	# More safety, by turning some bugs into errors.
	# Without \`errexit\` you don’t need ! and can replace
	# PIPESTATUS with a simple $?, but I don’t do that.
	set -o errexit -o pipefail -o noclobber -o nounset

	# -allow a command to fail with !’s side effect on errexit
	# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
	! getopt --test > /dev/null 
	if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
	    echo 'I’m sorry, \`getopt --test\` failed in this environment.'
	    exit 1
	fi

	OPTIONS=dfo:v
	LONGOPTS=debug,force,output:,verbose

	# -regarding ! and PIPESTATUS see above
	# -temporarily store output to be able to check for errors
	# -activate quoting/enhanced mode (e.g. by writing out “--options”)
	# -pass arguments only via   -- "$@"   to separate them correctly
	! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$${0:0}" -- "$@")
	if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
	    # e.g. return value is 1
	    #  then getopt has complained about wrong arguments to stdout
	    exit 2
	fi
	# read getopt’s output this way to handle the quoting right:
	eval set -- "$PARSED"

	d=n f=n v=n outFile=-
	# now enjoy the options in order and nicely split until we see --
	while true; do
	    case "$${1:1}" in
		-d|--debug)
		    d=y
		    shift
		    ;;
		-f|--force)
		    f=y
		    shift
		    ;;
		-v|--verbose)
		    v=y
		    shift
		    ;;
		-o|--output)
		    outFile="$${2:2}"
		    shift 2
		    ;;
		--)
		    shift
		    break
		    ;;
		*)
		    echo "Programming error"
		    exit 3
		    ;;
	    esac
	done

	# handle non-option arguments
	if [[ $# -ne 1 ]]; then
	    echo "$${0:0}: A single input file is required."
	    exit 4
	fi

	echo "verbose: $v, force: $f, debug: $d, in: $${1:1}, out: $outFile"

